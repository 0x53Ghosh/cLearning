#!/bin/bash
# ==============================================================================
# .bashrc.vscode - Generic Project Workspace Configuration
# ==============================================================================
# This file creates a secure, isolated workspace environment

# ==============================================================================
# 📁 PROJECT CONFIGURATION
# ==============================================================================
export PROJECT_NAME="$(basename "$PWD")"
export PROJECT_ROOT="$PWD"

# ==============================================================================
# 🛤️  PATH EXTENSIONS
# ==============================================================================
# Add project-specific binary directories to PATH
if [[ -d "bin" ]]; then
    export PATH="$PWD/bin:$PATH"
fi

if [[ -d "scripts" ]]; then
    export PATH="$PWD/scripts:$PATH"
fi

# ==============================================================================
# 🔒 PROJECT JAIL SYSTEM
# ==============================================================================
# Core function to validate paths are within project boundaries
check_path()
{
    local path="$1"
    if [[ -z "$path" ]]; then
        path="$PWD"
    fi
    
    local real_path=$(realpath "$path" 2>/dev/null)
    local real_root=$(realpath "$PROJECT_ROOT")
    
    if [[ "$real_path" == "$real_root"* ]]; then
        return 0
    else
        echo "Access denied: Outside project root"
        return 1
    fi
}

# ------------------------------------------------------------------------------
# Navigation Override: cd command
# ------------------------------------------------------------------------------
cd()
{
    # No arguments: go to project root (like ~ for home)
    if [[ $# -eq 0 ]]; then
        builtin cd "$PROJECT_ROOT"
        return
    fi
    
    local target="$1"
    case "$target" in
        ".")
            # Stay in current directory
            return 0
            ;;
        "..")
            # Can't go above project root
            if [[ "$PWD" == "$PROJECT_ROOT" ]]; then
                return 0
            fi
            local parent=$(dirname "$PWD")
            if check_path "$parent"; then
                builtin cd "$parent"
            fi
            ;;
        /*)
            # Absolute path - must be within project
            if check_path "$target"; then
                builtin cd "$target"
            fi
            ;;
        *)
            # Relative path - validate full path
            local full_path="$PWD/$target"
            if check_path "$full_path"; then
                builtin cd "$target"
            fi
            ;;
    esac
}

# ------------------------------------------------------------------------------
# Command Overrides: Safe wrapper functions
# ------------------------------------------------------------------------------

# Hidden files/directories - customize as needed

HIDDEN_ITEMS=(
    ".bashrc.vscode"
    ".env"
    ".env.local" 
    ".env.development"
    ".git"
    ".gitignore"
    ".vscode"
    "node_modules"
    "__pycache__"
    ".pytest_cache"
    ".coverage"
    "venv"
    ".venv"
    "vendor"
    "target"
    "build"
    "dist"
)

override_ls()
{
    if check_path; then
        local output
        output=$(command ls "$@" 2>/dev/null)
        local filtered_output=""

        while IFS= read -r line; do
            local should_hide=false

            # Extract just the filename from long listing
            local filename="$line"
            if [[ "$*" == *"-l"* ]]; then
                filename=$(echo "$line" | awk '{print $NF}')
            fi

            for hidden_item in "${HIDDEN_ITEMS[@]}"; do
                if [[ "$filename" == "$hidden_item" ]]; then
                    should_hide=true
                    break
                fi
            done

            if [[ "$should_hide" == false ]]; then
                filtered_output+="$line"$'\n'
            fi
        done <<< "$output"

        echo -n "$filtered_output"
    fi
}

override_pwd()
{
    local current=$(builtin pwd)
    if [[ "$current" == "$PROJECT_ROOT" ]]; then
        echo "/"
    else
        echo "${current#$PROJECT_ROOT}"
    fi
}

# Apply overrides using aliases (safer than function overrides)
alias ls='override_ls'
alias pwd='override_pwd'

# ==============================================================================
# 🚀 NAVIGATION SHORTCUTS
# ==============================================================================
alias root="cd $PROJECT_ROOT"
alias ..="cd .."
alias ...="cd ../.."

# ==============================================================================
# 📝 GIT SHORTCUTS
# ==============================================================================
alias gs="git status"
alias ga="git add"
alias gc="git commit"
alias gp="git push"
alias gl="git log --oneline -10"
alias gb="git branch"
alias gco="git checkout"

# ==============================================================================
# 💻 TERMINAL PROMPT
# ==============================================================================
export PS1='$ '

# Alternative: Show project-relative path in prompt
# export PS1='$(override_pwd) $ '

# ==============================================================================
# 🌍 ENVIRONMENT VARIABLES
# ==============================================================================
# Load environment files in order of precedence
if [[ -f ".env.local" ]]; then
    source .env.local
fi

if [[ -f ".env.development" ]]; then
    source .env.development
fi

if [[ -f ".env" ]]; then
    source .env
fi

# ==============================================================================
# 🎯 PROJECT-SPECIFIC CUSTOMIZATION SECTION
# ==============================================================================
# Add your project-specific aliases, functions, and configurations below:

# Example: Node.js project
# alias start="npm run dev"
# alias build="npm run build"
# alias test="npm test"

# Example: Python project
# alias run="python main.py"
# alias venv="source venv/bin/activate"

# Example: Go project
# alias run="go run ."
# alias build="go build"

# Example: Docker project
# alias up="docker-compose up -d"
# alias down="docker-compose down"
# alias logs="docker-compose logs -f"

# ==============================================================================
# 🚨 STARTUP MESSAGE
# ==============================================================================
echo "🚀 Welcome to $PROJECT_NAME workspace"
echo "🔒 Secure environment loaded - restricted to project directory"